
"""Monte Carlo Simulations

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WoQ1l6ooyQ59M9qs0RxDn8ccwhhI1q0r
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import yfinance as yf
from datetime import datetime, timedelta

# Monte Carlo function
def monte_carlo_option_price(S0, K, T, r, sigma, simulations=100000):
    np.random.seed(42)
    Z = np.random.standard_normal(simulations)
    ST = S0 * np.exp((r - 0.5 * sigma**2) * T + sigma * np.sqrt(T) * Z)
    payoff_call = np.maximum(ST - K, 0)
    mc_price = np.exp(-r * T) * np.mean(payoff_call)
    mc_se = np.std(payoff_call) / np.sqrt(simulations)
    return mc_price, mc_se, ST, payoff_call

# INFY data
S0_infy = 1333.30
K_infy = 1340
T_infy = 0.03836
r_infy = 0.06
sigma_infy = 0.30
S_expiry_infy = 1349.85

mc_price_infy, mc_se_infy, ST_infy, payoff_infy = monte_carlo_option_price(
    S0_infy, K_infy, T_infy, r_infy, sigma_infy
)

print("INFY Monte Carlo")
print(f"MC Price (Call) = ₹{mc_price_infy:.2f} ± {mc_se_infy:.3f}")
print(f"Mean simulated S_T = ₹{np.mean(ST_infy):.2f}")
print(f"P(ST >= K) = {np.mean(ST_infy >= K_infy) * 100:.2f}%")
percentile_infy = np.sum(ST_infy <= S_expiry_infy) / len(ST_infy) * 100
print(f"Observed expiry price percentile = {percentile_infy:.2f}th percentile")

# NIFTY real data
nifty_ticker = "^NSEI"
start_date = datetime(2023, 7, 12)
end_date = datetime(2023, 7, 26)

# Fetch last 60 trading days for volatility calculation
nifty_data = yf.download(nifty_ticker, start=start_date - timedelta(days=90), end=start_date, progress=False)
nifty_data['LogRet'] = np.log(nifty_data['Close'] / nifty_data['Close'].shift(1))
sigma_nifty = nifty_data['LogRet'].std() * np.sqrt(252)  # annualized vol

# Fetch spot price at start date
spot_df = yf.download(nifty_ticker, start=start_date, end=start_date + timedelta(days=1), progress=False)
S0_nifty = float(spot_df['Close'].iloc[0])

K_nifty = S0_nifty
T_nifty = T_infy
r_nifty = 0.06

mc_price_nifty, mc_se_nifty, ST_nifty, payoff_nifty = monte_carlo_option_price(
    S0_nifty, K_nifty, T_nifty, r_nifty, sigma_nifty
)

print("\n=== NIFTY Monte Carlo ===")
print(f"Spot (start) = ₹{S0_nifty:.2f}")
print(f"Volatility (annual) = {sigma_nifty:.2%}")
print(f"MC Price (Call) = ₹{mc_price_nifty:.2f} ± {mc_se_nifty:.3f}")
print(f"Mean simulated S_T = ₹{np.mean(ST_nifty):.2f}")
print(f"P(ST >= K) = {np.mean(ST_nifty >= K_nifty) * 100:.2f}%")

# Histogram INFY
plt.figure(figsize=(8,5))
plt.hist(ST_infy, bins=50, alpha=0.6, color='blue', label='Simulated Prices')
plt.axvline(S_expiry_infy, color='red', linestyle='--', label=f'Actual Price ₹{S_expiry_infy}')
plt.title("INFY: Simulated Terminal Prices vs Actual")
plt.xlabel("S_T (INR)")
plt.ylabel("Frequency")
plt.legend()
plt.show()

# CDF INFY
plt.figure(figsize=(8,5))
sorted_ST = np.sort(ST_infy)
cdf = np.arange(len(sorted_ST)) / len(sorted_ST)
plt.plot(sorted_ST, cdf, label='CDF')
plt.axvline(S_expiry_infy, color='red', linestyle='--', label=f'Actual Price ₹{S_expiry_infy}')
plt.title("INFY: CDF of Simulated Terminal Prices")
plt.xlabel("S_T (INR)")
plt.ylabel("Cumulative Probability")
plt.legend()
plt.show()

# Payoff distribution INFY
plt.figure(figsize=(8,5))
plt.hist(payoff_infy, bins=50, alpha=0.6, color='green')
plt.title("INFY: Payoff Distribution")
plt.xlabel("Payoff (INR)")
plt.ylabel("Frequency")
plt.show()

# INFY vs NIFTY histogram comparison
plt.figure(figsize=(8,5))
plt.hist(ST_infy, bins=50, alpha=0.5, label='INFY')
plt.hist(ST_nifty, bins=50, alpha=0.5, label='NIFTY')
plt.title("Comparison of Simulated Terminal Prices")
plt.xlabel("S_T (INR)")
plt.ylabel("Frequency")
plt.legend()
plt.show()